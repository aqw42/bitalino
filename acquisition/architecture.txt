Software Architecture for BITalino Multi-Sensor Acquisition System
==================================================================

Overview:
---------
The system is designed to acquire, process, visualize, and transmit data from multiple sensors (EMG, EEG, ECG) connected to a BITalino device. The architecture is modular, supporting easy extension to new sensor types and flexible configuration via an external config file.

Main Components:
----------------
1. **Configuration Loader**
   - Reads user configuration (MAC address, buffer size, sampling rate, OSC settings, sensor list) from a config file.
   - Data structure: `Config` class or dictionary.

2. **Sensor Abstraction**
   - `Sensor` class: Represents a physical sensor (type, port, transfer function, OSC endpoints).
   - Attributes: `type`, `port`, `index`, `transfer_function`, `osc_prefix`.
   - Method: `apply_transfer_function(raw_data)`

3. **BITalino Interface**
   - Handles connection, data acquisition, and device management.
   - Methods: `connect()`, `start()`, `read()`, `stop()`, `close()`

4. **Data Acquisition Manager**
   - Manages acquisition threads for reading data from BITalino.
   - Buffers data for each sensor.
   - Method: `acquire_data()`

5. **Signal Processing Module**
   - Provides static methods for:
     - Transfer function application (per sensor type)
     - FFT computation
     - Filtering (low-pass at 5Hz, notch at 50Hz)
   - Methods: `compute_fft()`, `apply_lowpass()`, `apply_notch()`

6. **Graph Manager**
   - Handles real-time plotting for each sensor:
     - Raw voltage
     - Raw FFT
     - Filtered FFT
   - Data structure: `Graph` class (one per sensor)
   - Methods: `update_plot()`

7. **OSC Sender**
   - Sends processed data to OpenSoundMeter endpoints.
   - Each sensor has distinct endpoints, prefixed by `/type+index/`.
   - Methods: `send_raw()`, `send_fft()`, `send_filtered_fft()`

8. **Main Application Flow**
   - Load configuration
   - Initialize BITalino and sensors
   - Start acquisition and processing threads
   - Update plots and send OSC messages in main loop
   - Graceful shutdown on exit

Class/Method Sketch:
--------------------
- `Config`: Loads and stores configuration parameters
- `Sensor`: Holds sensor info and transfer function
- `BITalinoInterface`: Manages device connection and data reading
- `AcquisitionManager`: Handles data acquisition and buffering
- `SignalProcessor`: Static methods for filtering and FFT
- `GraphManager`: Manages plots for each sensor
- `OSCSender`: Sends data to OSC endpoints
- `main()`: Orchestrates initialization, main loop, and shutdown

Data Structures:
----------------
- `sensors`: List of `Sensor` objects, one per configured sensor
- `data_buffers`: Dict mapping sensor to data buffer (e.g., `Deque`)
- `config`: `Config` object with all user settings

Main Flow:
----------
1. Parse `config.txt` for all settings and sensor list
2. Create `Sensor` objects for each sensor in config
3. Connect to BITalino and start acquisition
4. For each sensor:
   - Buffer incoming data
   - Apply transfer function
   - Compute and plot raw data, raw FFT, filtered FFT
   - Send data to OSC endpoints
5. Repeat until user exits
6. On exit, stop acquisition, close device, and clean up resources

This architecture supports easy extension to new sensor types, flexible configuration, and robust real-time processing and visualization for multi-sensor BITalino setups.
